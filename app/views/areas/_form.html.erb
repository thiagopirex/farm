<%= form_for(@area) do |f| %>
  <% if @area.errors.any? %>
    <div id="error_explanation">
      <ul>
      <% @area.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  
  <%= f.hidden_field :propriedade_id, :value => @propriedade.id %>
  <%= hidden_field_tag(:poligono, 'valor') %>
  	
  <div class="container">
    <div class="row">
        <div class="col-md-8" id="map" style="width: 75%"></div>
        <div class="col-md-4 open" id="sidebar" style="width: 24%">
			<div class="field">
				<table class="table">
					<tr>
						<td><%= f.label :nome %></td>
						<td><%= f.text_field :nome %></td>
					</tr>
					<tr>
						<td><%= f.label :condição %></td>
						<td><%= f.text_field :situacao %></td>
					</tr>
					<tr>
						<td><%= f.label :pastagem_atual %></td>
						<td><%= f.text_field :pastagem_atual %></td>
					</tr>
					<tr>
						<td colspan="2">
							<% if !@area.foto_conteudo.nil? %>
				      			<%= getImgBase64(@area) %>
							    </br>
							    </br>
				      		<% end %>
				      		<%= f.file_field :file%>
						</td>
					</tr>
				</table>
				
				<table class="table">
					<tr>
						<td><%= f.label :Latitude %></td>
						<td><input type="text" id="input_lat"/></td>
					</tr>
					<tr>
						<td><%= f.label :Longitude %></td>
						<td><input type="text" id="input_lng"/></td>
					</tr>
					<tr>
						<td colspan="2">
							<div class="pull-left">
								<input type="button" id="add_lat_lng" class="btn btn-info btn-md" value="<-- Adicionar" />
								<input type="button" id="clean" class="btn btn-danger btn-md" value="Limpar" />
							</div>				
						</td>
					</tr>
				</table>				
			</div>
			
			</br>
			</br>
			</br>
			<div class="pull-left">
				<%= f.submit ( f.object.new_record? ? "Criar" : "Atualizar"), class:"btn btn-success btn-md"%>
				<%= link_to 'Voltar', @propriedade, class:"btn btn-default btn-md" %>
				 <% if !@area.foto_conteudo.nil? %> 
					<%= link_to "Download", area_path(:id => @area.id, :download => true), class:"btn btn-default btn-md", method: :get %>
			    <% end %>
			</div>
		</div>
    </div>
</div>
  
  <script>
  var map;
  
  // Initialise the FeatureGroup to store editable layers
  var drawnItens = new L.FeatureGroup();
  
  var drawControlEditOnly;
  var drawControlFull;
  
  var pontos = new Array();
  var linhas = new Array();
  var primeiroPonto = "";
  var ultimoPonto = "";
  var ultimoMarker = ""; 
 
  
  $('#collapse').click(function(){
	showHideMapProperties();
  });
  
  $('#add_lat_lng').click(function() {
  	addPoint();
  });
  
  $('#clean').click(function() {
  	cleanVariables();
  });



drawMap();
  
function drawMap() {
  	
	
	var geometriaSede =  '<%= @propriedade.getGeoJsonFromRGeoPoint %>'; 

	var mapOptions = getMapOptions(geometriaSede);
  	
	map = L.map('map', mapOptions);
	
	addCollapseControl(map);
	L.control.layers(baseMaps).addTo(map);
	L.control.measure(measureOptions).addTo(map);
	addReloadControl(map);
	
	var editar = false;
	
	var stringGeometria = '<%= @poligono %>';
    if (stringGeometria != "") {
		stringGeometria = replaceAll(stringGeometria, "&quot;", "\"");
		
		var features = JSON.parse(stringGeometria);
		var geoJson = L.geoJson(features, {
			onEachFeature: function (feature, layer) {
				layer.setStyle({color: 'yellow'});
				layer.addTo(drawnItens);
				capturarGeometria(layer);
		   }
		});
		

		editar = true;
	}
	
	// Initialise the draw control and pass it the FeatureGroup of editable layers
	drawControlFull = new L.Control.Draw({
		draw: {
			polyline: false,
			marker: false,
			circle: false,
			rectangle: false,
			polygon: {
				showArea: true,
				shapeOptions: {
					color: '#bada55'
				}
			}
		},
  		edit: {
    		featureGroup: drawnItens
  		}
	});
	
	drawControlEditOnly = new L.Control.Draw({
    	edit: {
        	featureGroup: drawnItens
    	},
    	draw: false
	});
	
	map.addLayer(drawnItens);
	
	if (editar) {
		map.removeControl(drawControlFull);
        map.addControl(drawControlEditOnly);
	} else {
		map.addControl(drawControlFull);
	}
	
	map.on(L.Draw.Event.EDITED, editGeometry);
	
	
	addLatLng(map);
	
	map.on(L.Draw.Event.CREATED, function (e) {
  		var layer = e.layer;
	  	layer.addTo(drawnItens);
		var area = "Área: " + (toHectare(LGeo.area(layer))).toFixed(2) + " hectares"; 
		layer.bindPopup(area);
    	
		capturarGeometria(layer);
    	
    	//console.log("area: " + L.GeometryUtil.geodesicArea(layer.getLatLngs()));
    	
    	map.removeControl(drawControlFull);
        map.addControl(drawControlEditOnly);
	});
	
	
	map.on(L.Draw.Event.DELETED, function(e) {
    	var type = e.layerType;
        var layer = e.layer;
		var check =  Object.keys(drawnItens._layers).length;
	    if (check === 0){
	        map.removeControl(drawControlEditOnly);
	        map.addControl(drawControlFull);
	    };
	    document.getElementById('poligono').value = "";
	    disableFields(false);
	});
	
	var stringGeometria;
    var link;
    var id;
    <% @areas.each do |a| %> 
    	<% if a.id != @area.id %>
		   	stringGeometria = '<%= a.getGeoJsonFromRGeo %>';
		   	id = <%= a.id %>;
		   	link = "</br><a href='/areas/" + id + "'>Detalhar</a>";
		   	link = link + " | <a href='/areas/" + id + "/edit'>Editar</a>";
		   	link = link + " | <a data-confirm='Tem certeza?' rel='nofollow' data-method='delete' href='/areas/" + id + "'>Excluir</a>";
		   	img = "";
		   	<% if !a.foto_conteudo.nil? %>
		   		var tipo = "<%= raw (a.foto_tipo) %>";
			   	base64 = "<%=  a.getContentImgBase64 %>";
			   	img = "<img style=\'width: 300px; height: 250px;\' src=\'data:"  + tipo + ";base64," + base64 + "'/>";
			<% end %>   	
		   	adicionarPoligonoArea(stringGeometria, map, link, img);
    	<% end %>
     
    <% end %>
}
function capturarGeometria(layer) {
	// here you can get it in geojson format
    var geojson = layer.toGeoJSON();
    var json = JSON.stringify(geojson);
    
    document.getElementById('poligono').value = json;
}

function editGeometry(e) {
	drawnItens.eachLayer(function (layer) {
		capturarGeometria(layer);
	});
}

function addPoint() {
	var lat = $("#input_lat").val();
	var lng = $("#input_lng").val();
	addPointToMap(lat, lng);	
}


function addPointToMap(lat, lng) {
	var marker;
	if (ultimoPonto != "") {
		var pointA = ultimoPonto;
		var pointB = new L.LatLng(lat, lng);
		var pointList = [pointA, pointB];
		ultimoPonto = pointB;
		pontos.push(ultimoPonto);
		// stop add points and transform
		if (primeiroPontoIgualAoUltimo() && pontos.length > 2) {
			map.removeLayer(ultimoMarker);
			addToDrawnItens();
		} else {
			// continue
			marker = L.marker([lat, lng]);
			marker.addTo(map);
			
			var polyline = new L.Polyline(pointList, {
			    color: 'red',
			    weight: 3,
			    opacity: 0.5,
			    smoothFactor: 1
			});
			polyline.addTo(map);
			linhas.push(polyline);
			
			if (ultimoMarker != "") {
				map.removeLayer(ultimoMarker);
			}
			ultimoMarker = marker;
		}
	} else {
		//primeiro ponto
		ultimoPonto = new L.LatLng(lat, lng);
		primeiroPonto = ultimoPonto;
		
		pontos.push(primeiroPonto);
		
		marker = L.marker([lat, lng]);
		marker.addTo(map);
		ultimoMarker = marker;
	}
}

function addToDrawnItens() {
	var polygon = new L.Polygon(pontos, {
	    color: '#bada55'
	    //,weight: 3,opacity: 0.5,smoothFactor: 1
	});
	polygon.addTo(drawnItens);
	
	capturarGeometria(polygon);
	
	map.removeControl(drawControlFull);
    map.addControl(drawControlEditOnly);
    
    cleanVariables();
	disableFields(true);
}

function disableFields(disable) {
	$("#input_lat").attr('readonly', disable);
	$("#input_lng").attr('readonly', disable);
	$("#input_lat").val("");
	$("#input_lng").val("");
	$("#add_lat_lng").attr("disabled", disable);
	$("#clean").attr("disabled", disable);
}

function primeiroPontoIgualAoUltimo () {
	return primeiroPonto != "" && ultimoPonto != ""
		&& primeiroPonto.valueOf().lat == ultimoPonto.valueOf().lat
		&& primeiroPonto.valueOf().lng == ultimoPonto.valueOf().lng
		;
}

function cleanVariables() {
	if (linhas != "") {
		for (var i = 0; i < linhas.length; i++) {
			map.removeLayer(linhas[i]);
		}
	}
	
	if (ultimoMarker != "") {
		ultimoMarker.removeFrom(map);
	}

	primeiroPonto = "";	
	ultimoPonto = "";
	ultimoMarker = "";
	pontos = new Array();
	linhas = new Array();
}
</script>
<% end %>
